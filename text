fun run() {
    var dead = false
    var currId = -1
    while (users.find { it.tasks.isNotEmpty() } != null) {
        dead = false
        for (i in 1..clockTime) {
            if (currUser.tasks.isNotEmpty() && !dead) {
                if (currUser.busy == 0) {
                    logger.log(0, State.E)
                    currUser.tasks[0]--
                    logger.log(currUser.id, State.W)
                    for (state in data[u]) {
                        s += when (state) {
                            State.W -> { "_" }
                            State.I -> { "I" }
                            State.N -> { "O" }
                            State.E -> { " " }
                            State.D -> { "*" }
                            else -> { " " }
                        }
                        n++
                        if (n % clockTime == 0)
                            s += "| "
                    }
                    if (currUser.tasks[0] == 0) {
                        currUser.tasks.removeAt(0)
                        if (inputTime == 0)
                            dead = true
                        if (currUser.tasks.isNotEmpty())
                            currUser.busy = inputTime
                    }
                }
                else {
                    logger.log(0, State.D)
                    currUser.busy--
                    logger.log(currUser.id, State.I)
                    if (currUser.busy == 0)
                        dead = true
                }
            } else {
                logger.log(0, State.D)
                logger.log(currUser.id, State.N)
            }

            for (user in users) {
                if (user.busy != 0) {
                    user.busy--
                    logger.log(user.id, State.I)
                } else {
                    logger.log(user.id, State.N)
                }
            }
        }
        users.add(currUser)
        users.sortBy { it.priority }
    }
}